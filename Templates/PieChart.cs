// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 16.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DiZhuaChart.NET.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\c#\DiZhuaChart.NET\Templates\PieChart.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class PieChart : PieChartBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<div id=\"");
            
            #line 6 "D:\c#\DiZhuaChart.NET\Templates\PieChart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(chart_id));
            
            #line default
            #line hidden
            this.Write("\" class=\"chart-container\" style=\"width:900px; height:500px;\"></div>\r\n    <script>" +
                    "\r\n        var chart_");
            
            #line 8 "D:\c#\DiZhuaChart.NET\Templates\PieChart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(chart_id));
            
            #line default
            #line hidden
            this.Write(" = echarts.init(\r\n            document.getElementById(\'");
            
            #line 9 "D:\c#\DiZhuaChart.NET\Templates\PieChart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(chart_id));
            
            #line default
            #line hidden
            this.Write("\'), \'white\', {renderer: \'canvas\'});\r\n        var option_");
            
            #line 10 "D:\c#\DiZhuaChart.NET\Templates\PieChart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(chart_id));
            
            #line default
            #line hidden
            this.Write(@" = {
    ""animation"": true,
    ""animationThreshold"": 2000,
    ""animationDuration"": 1000,
    ""animationEasing"": ""cubicOut"",
    ""animationDelay"": 0,
    ""animationDurationUpdate"": 300,
    ""animationEasingUpdate"": ""cubicOut"",
    ""animationDelayUpdate"": 0,
    ""color"": [
        ""#c23531"",
        ""#2f4554"",
        ""#61a0a8"",
        ""#d48265"",
        ""#749f83"",
        ""#ca8622"",
        ""#bda29a"",
        ""#6e7074"",
        ""#546570"",
        ""#c4ccd3"",
        ""#f05b72"",
        ""#ef5b9c"",
        ""#f47920"",
        ""#905a3d"",
        ""#fab27b"",
        ""#2a5caa"",
        ""#444693"",
        ""#726930"",
        ""#b2d235"",
        ""#6d8346"",
        ""#ac6767"",
        ""#1d953f"",
        ""#6950a1"",
        ""#918597""
    ],
    ""series"": [
        {
            ""type"": ""pie"",
            ""name"": ""\u5c40\u6570"",
            ""clockwise"": true,
            ""data"": [
                ");
            
            #line 51 "D:\c#\DiZhuaChart.NET\Templates\PieChart.tt"
 foreach (var item in data.Keys)
                { 
            
            #line default
            #line hidden
            this.Write("                    {\r\n                        \"name\": \"");
            
            #line 54 "D:\c#\DiZhuaChart.NET\Templates\PieChart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("\",\r\n                        \"value\": \"");
            
            #line 55 "D:\c#\DiZhuaChart.NET\Templates\PieChart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(data[item]));
            
            #line default
            #line hidden
            this.Write("\"\r\n                    },\r\n                ");
            
            #line 57 "D:\c#\DiZhuaChart.NET\Templates\PieChart.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"            ],
            ""radius"": [
                ""0%"",
                ""75%""
            ],
            ""center"": [
                ""50%"",
                ""60%""
            ],
            ""label"": {
                ""show"": true,
                ""position"": ""top"",
                ""margin"": 8,
                ""formatter"": ""{b}:{d}%""
            },
            ""rippleEffect"": {
                ""show"": true,
                ""brushType"": ""stroke"",
                ""scale"": 2.5,
                ""period"": 4
            }
        }
    ],
    ""legend"": [
        {
            ""data"": [],
            ""selected"": {},
            ""show"": true,
            ""padding"": 5,
            ""itemGap"": 10,
            ""itemWidth"": 25,
            ""itemHeight"": 14
        }
    ],
    ""tooltip"": {
        ""show"": true,
        ""trigger"": ""item"",
        ""triggerOn"": ""mousemove|click"",
        ""axisPointer"": {
            ""type"": ""line""
        },
        ""textStyle"": {
            ""fontSize"": 14
        },
        ""borderWidth"": 0
    },
    ""title"": [
        {
            ""text"": """);
            
            #line 106 "D:\c#\DiZhuaChart.NET\Templates\PieChart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(title));
            
            #line default
            #line hidden
            this.Write("\",\r\n            \"padding\": 5,\r\n            \"itemGap\": 10\r\n        }\r\n    ]\r\n};\r\n " +
                    "       chart_");
            
            #line 112 "D:\c#\DiZhuaChart.NET\Templates\PieChart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(chart_id));
            
            #line default
            #line hidden
            this.Write(".setOption(option_");
            
            #line 112 "D:\c#\DiZhuaChart.NET\Templates\PieChart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(chart_id));
            
            #line default
            #line hidden
            this.Write(");\r\n    </script>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class PieChartBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
